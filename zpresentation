# zpresentation - zsh plugin for presentation
#
# Copyright (c) 2014 Hideaki Miyake
# Licensed under the MIT License (MIT)
#
# Author : Hideaki Miyake (https://github.com/mollifier)
# URL : https://github.com/mollifier/zpresentation
#

typeset -r SCRIPT_NAME="zpresentation"

function _zpresentation_print_usage()
{
  cat << EOF
Usage: $SCRIPT_NAME [PATH]

-h           display this help and exit
EOF
}

function _zpresentation_print_error()
{
  echo "${SCRIPT_NAME}: $@" 1>&2
  echo "Try \`-h' option for more information." 1>&2
}

function _zpresentation_escape_regex()
{
  echo -nE "$1" | sed -e 's/[][^\\.*$(){}+?|-]/\\&/g'
}

function _zpresentation_display_markdown_header()
{
  local file="$1"
  # header_id is number (1, 2, 3, ...)
  local header_id="$2"

  # remove header symbol (e.g. ## )
  grep -E "^#+[ \t]" -- "$file" \
    | sed 's/^#\{1,\}[ \t]\{1,\}//' \
    | sed -n "${header_id}p"
}

function _zpresentation_display_markdown_header_line_number()
{
  local file="$1"
  # header_id is number (1, 2, 3, ...)
  local header_id="$2"

  grep -nE "^#+[ \t]" -- "$file" \
    | sed 's/:.*$//' \
    | sed -n "${header_id}p"
}

# 指定した見出しから次の見出しまでを出力する
# 次の見出し(同じレベルとは限らない)までを1ページ分のスライドとみなす
function _zpresentation_display_markdown_paragraph()
{
  local file="$1"
  local paragraph_id="$2"
  local next_paragraph_id="$(( $paragraph_id + 1 ))"

  local header_line_number="$(_zpresentation_display_markdown_header_line_number "$input_file" "$paragraph_id")"
  local next_header_line_number="$(_zpresentation_display_markdown_header_line_number "$input_file" "$next_paragraph_id")"

  cat -- "$file" | sed -n "${header_line_number},$(( $next_header_line_number - 1 ))p"
}

function _zpresentation_main()
{
  # header, paragraph, ...
  local mode
  local header_id
  local paragraph_id

  local option OPTARG OPTIND
  while getopts ':e:p:h' option; do
    case $option in
      e)
        mode="header"
        header_id="$OPTARG"
        ;;
      p)
        mode="paragraph"
        paragraph_id="$OPTARG"
        ;;
      h)
        _zpresentation_print_usage
        return 0
        ;;
      :)
        _zpresentation_print_error "option requires an argument -- $OPTARG"
        return 1
        ;;
      *)
        _zpresentation_print_error "invalid option -- $OPTARG"
        return 1
        ;;
    esac
  done
  shift $(expr $OPTIND - 1)

  local input_file="$1"

  case "$mode" in
    header)
      _zpresentation_display_markdown_header "$input_file" "$header_id"
      #_zpresentation_display_markdown_header_line_number "$input_file" "$header_id"
      ;;
    paragraph)
      _zpresentation_display_markdown_paragraph "$input_file" "$paragraph_id"
      ;;
  esac


}

#set -o xtrace
# treat unset parameters as an error
set -o no_unset

_zpresentation_main "$@"

set +o no_unset

#set +o xtrace

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
