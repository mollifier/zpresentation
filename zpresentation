# zpresentation - zsh plugin for presentation
#
# Copyright (c) 2014 Hideaki Miyake
# Licensed under the MIT License (MIT)
#
# Author : Hideaki Miyake (https://github.com/mollifier)
# URL : https://github.com/mollifier/zpresentation
#

typeset -r SCRIPT_NAME="zpresentation"

function _zpresentation_print_usage()
{
  cat << EOF
Usage: $SCRIPT_NAME [PATH]

-h           display this help and exit
EOF
}

function _zpresentation_print_error()
{
  echo "${SCRIPT_NAME}: $@" 1>&2
  echo "Try \`-h' option for more information." 1>&2
}

function _zpresentation_escape_regex()
{
  echo "$1" | sed -e 's/[][^\\.*$(){}+?|-]/\\&/g'
}

function _zpresentation_display_markdown_header()
{
  local file=$1
  # header_level is number (1, 2, 3, ...)
  local header_level=$2

  grep -E "^#{$header_level} " -- "$file"
}

function _zpresentation_display_markdown_paragraph()
{
  local file=$1
  local header_string=$2

  local escaped_header_string=$(_zpresentation_escape_regex "$header_string")
  grep -E "^#+[ \t]+$escaped_header_string" -- "$file"
}

function _zpresentation_main()
{
  local header_level
  local header_string

  local option OPTARG OPTIND
  while getopts ':e:p:h' option; do
    case $option in
      e)
        header_level="$OPTARG"
        ;;
      p)
        header_string="$OPTARG"
        ;;
      h)
        _zpresentation_print_usage
        return 0
        ;;
      :)
        _zpresentation_print_error "option requires an argument -- $OPTARG"
        return 1
        ;;
      *)
        _zpresentation_print_error "invalid option -- $OPTARG"
        return 1
        ;;
    esac
  done
  shift $(expr $OPTIND - 1)

  # TODO: 
  local input_file="$1"

  #_zpresentation_display_markdown_header "$input_file" "$header_level"
  _zpresentation_display_markdown_paragraph "$input_file" "$header_string"
}

#set -o xtrace

_zpresentation_main "$@"

#set +o xtrace

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
